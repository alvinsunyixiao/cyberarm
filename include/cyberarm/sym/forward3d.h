// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace symik {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     q: Matrix41
 *     lamb: Scalar
 *     target3d: Matrix31
 *
 * Outputs:
 *     f: Matrix31
 *     e: Scalar
 *     J: Matrix34
 *     A: Matrix44
 */
template <typename Scalar>
void Forward3D(const Eigen::Matrix<Scalar, 4, 1>& q, const Scalar lamb,
               const Eigen::Matrix<Scalar, 3, 1>& target3d,
               Eigen::Matrix<Scalar, 3, 1>* const f = nullptr, Scalar* const e = nullptr,
               Eigen::Matrix<Scalar, 3, 4>* const J = nullptr,
               Eigen::Matrix<Scalar, 4, 4>* const A = nullptr) {
  // Total ops: 425

  // Input arrays

  // Intermediate terms (157)
  const Scalar _tmp0 = (Scalar(1) / Scalar(2)) * q(0, 0);
  const Scalar _tmp1 = std::sin(_tmp0);
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = Scalar(2.0) * _tmp2;
  const Scalar _tmp4 = Scalar(1.0) - _tmp3;
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * q(1, 0);
  const Scalar _tmp6 = std::cos(_tmp5);
  const Scalar _tmp7 = std::sin(_tmp5);
  const Scalar _tmp8 = _tmp6 * _tmp7;
  const Scalar _tmp9 = Scalar(0.259544) * _tmp8;
  const Scalar _tmp10 = (Scalar(1) / Scalar(2)) * q(2, 0);
  const Scalar _tmp11 = std::cos(_tmp10);
  const Scalar _tmp12 = _tmp11 * _tmp6;
  const Scalar _tmp13 = _tmp1 * _tmp12;
  const Scalar _tmp14 = Scalar(1.0) * _tmp1;
  const Scalar _tmp15 = std::sin(_tmp10);
  const Scalar _tmp16 = _tmp15 * _tmp7;
  const Scalar _tmp17 = Scalar(1.0) * _tmp13 + _tmp14 * _tmp16;
  const Scalar _tmp18 = _tmp11 * _tmp7;
  const Scalar _tmp19 = std::cos(_tmp0);
  const Scalar _tmp20 = Scalar(1.0) * _tmp19;
  const Scalar _tmp21 = _tmp15 * _tmp6;
  const Scalar _tmp22 = _tmp18 * _tmp20 - _tmp20 * _tmp21;
  const Scalar _tmp23 = 1 - 2 * std::pow(_tmp22, Scalar(2));
  const Scalar _tmp24 = -2 * std::pow(_tmp17, Scalar(2)) + _tmp23;
  const Scalar _tmp25 = (Scalar(1) / Scalar(2)) * q(3, 0);
  const Scalar _tmp26 = std::sin(_tmp25);
  const Scalar _tmp27 = std::cos(_tmp25);
  const Scalar _tmp28 = Scalar(0.28261399999999998) * _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp12 * _tmp19;
  const Scalar _tmp30 = _tmp16 * _tmp20 + _tmp29;
  const Scalar _tmp31 = 2 * _tmp22;
  const Scalar _tmp32 = _tmp30 * _tmp31;
  const Scalar _tmp33 = -_tmp14 * _tmp18 + _tmp14 * _tmp21;
  const Scalar _tmp34 = 2 * _tmp17;
  const Scalar _tmp35 = _tmp33 * _tmp34;
  const Scalar _tmp36 = _tmp32 + _tmp35;
  const Scalar _tmp37 = std::pow(_tmp26, Scalar(2));
  const Scalar _tmp38 = Scalar(0.14130699999999999) - Scalar(0.28261399999999998) * _tmp37;
  const Scalar _tmp39 = std::pow(_tmp6, Scalar(2));
  const Scalar _tmp40 = std::pow(_tmp19, Scalar(2));
  const Scalar _tmp41 = std::pow(_tmp7, Scalar(2));
  const Scalar _tmp42 = Scalar(2.0) * _tmp41;
  const Scalar _tmp43 = -_tmp40 * _tmp42 + 1;
  const Scalar _tmp44 = -_tmp3 * _tmp39 + _tmp43;
  const Scalar _tmp45 = Scalar(0.259544) * _tmp11 * _tmp15;
  const Scalar _tmp46 = _tmp3 * _tmp8;
  const Scalar _tmp47 = -_tmp46;
  const Scalar _tmp48 = Scalar(2.0) * _tmp40 * _tmp8;
  const Scalar _tmp49 = _tmp47 + _tmp48;
  const Scalar _tmp50 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp51 = Scalar(1.0) - Scalar(2.0) * _tmp50;
  const Scalar _tmp52 = Scalar(0.129772) * _tmp51;
  const Scalar _tmp53 =
      _tmp24 * _tmp28 + _tmp36 * _tmp38 + _tmp4 * _tmp9 - _tmp44 * _tmp45 + _tmp49 * _tmp52;
  const Scalar _tmp54 = _tmp1 * _tmp19;
  const Scalar _tmp55 = Scalar(0.51908799999999999) * _tmp54 * _tmp8;
  const Scalar _tmp56 = _tmp51 * _tmp55;
  const Scalar _tmp57 = 2 * _tmp33;
  const Scalar _tmp58 = _tmp22 * _tmp57 + _tmp30 * _tmp34;
  const Scalar _tmp59 = _tmp42 * _tmp54;
  const Scalar _tmp60 = Scalar(2.0) * _tmp39 * _tmp54;
  const Scalar _tmp61 = -_tmp59 + _tmp60;
  const Scalar _tmp62 = _tmp22 * _tmp34 - _tmp30 * _tmp57;
  const Scalar _tmp63 = _tmp28 * _tmp58 + _tmp38 * _tmp62 - _tmp45 * _tmp61 + _tmp55 + _tmp56;
  const Scalar _tmp64 = -_tmp2 * _tmp42 + _tmp43;
  const Scalar _tmp65 = _tmp23 - 2 * std::pow(_tmp33, Scalar(2));
  const Scalar _tmp66 = -_tmp32 + _tmp35;
  const Scalar _tmp67 = -_tmp48;
  const Scalar _tmp68 = _tmp47 + _tmp67;
  const Scalar _tmp69 = _tmp28 * _tmp66 + _tmp38 * _tmp65 - Scalar(0.129772) * _tmp42 -
                        _tmp45 * _tmp68 + _tmp52 * _tmp64 + Scalar(0.247062);
  const Scalar _tmp70 = Scalar(0.5) * std::pow(Scalar(_tmp53 - target3d(0, 0)), Scalar(2)) +
                        Scalar(0.5) * std::pow(Scalar(_tmp63 - target3d(1, 0)), Scalar(2)) +
                        Scalar(0.5) * std::pow(Scalar(_tmp69 - target3d(2, 0)), Scalar(2));
  const Scalar _tmp71 = Scalar(0.5) * _tmp1;
  const Scalar _tmp72 = _tmp18 * _tmp71;
  const Scalar _tmp73 = _tmp15 * _tmp71;
  const Scalar _tmp74 = _tmp6 * _tmp73;
  const Scalar _tmp75 = -_tmp72 + _tmp74;
  const Scalar _tmp76 = 2 * _tmp30;
  const Scalar _tmp77 = _tmp75 * _tmp76;
  const Scalar _tmp78 = _tmp7 * _tmp73;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = -Scalar(1) / Scalar(2) * _tmp13 + _tmp79;
  const Scalar _tmp81 = _tmp31 * _tmp80;
  const Scalar _tmp82 = Scalar(0.5) * _tmp19;
  const Scalar _tmp83 = _tmp18 * _tmp82;
  const Scalar _tmp84 = _tmp15 * _tmp82;
  const Scalar _tmp85 = _tmp6 * _tmp84;
  const Scalar _tmp86 = -_tmp83 + _tmp85;
  const Scalar _tmp87 = Scalar(0.5) * _tmp29;
  const Scalar _tmp88 = _tmp7 * _tmp84;
  const Scalar _tmp89 = _tmp87 + _tmp88;
  const Scalar _tmp90 = 2 * _tmp89;
  const Scalar _tmp91 = _tmp33 * _tmp90;
  const Scalar _tmp92 = _tmp34 * _tmp86 + _tmp91;
  const Scalar _tmp93 = 4 * _tmp17;
  const Scalar _tmp94 = 4 * _tmp22;
  const Scalar _tmp95 = -_tmp75 * _tmp94;
  const Scalar _tmp96 = _tmp28 * (-_tmp89 * _tmp93 + _tmp95) + _tmp38 * (_tmp77 + _tmp81 + _tmp92) -
                        _tmp45 * (_tmp59 - _tmp60) - _tmp55 - _tmp56;
  const Scalar _tmp97 = _tmp2 * _tmp9;
  const Scalar _tmp98 = _tmp40 * _tmp9;
  const Scalar _tmp99 = _tmp57 * _tmp75;
  const Scalar _tmp100 = _tmp30 * _tmp90;
  const Scalar _tmp101 = _tmp100 + _tmp99;
  const Scalar _tmp102 = Scalar(1.0) * _tmp40;
  const Scalar _tmp103 = _tmp102 * _tmp39;
  const Scalar _tmp104 = _tmp102 * _tmp41;
  const Scalar _tmp105 = Scalar(1.0) * _tmp2;
  const Scalar _tmp106 = -_tmp105 * _tmp39 + _tmp105 * _tmp41;
  const Scalar _tmp107 = _tmp103 - _tmp104 + _tmp106;
  const Scalar _tmp108 =
      -_tmp107 * _tmp45 + _tmp28 * (_tmp101 + _tmp31 * _tmp86 + _tmp34 * _tmp80) +
      _tmp38 * (_tmp22 * _tmp90 + _tmp34 * _tmp75 - _tmp57 * _tmp80 - _tmp76 * _tmp86) -
      _tmp51 * _tmp97 + _tmp51 * _tmp98 - _tmp97 + _tmp98;
  const Scalar _tmp109 = 4 * _tmp33;
  const Scalar _tmp110 =
      _tmp28 * (-_tmp77 - _tmp81 + _tmp92) + _tmp38 * (-_tmp109 * _tmp86 + _tmp95);
  const Scalar _tmp111 = Scalar(0.129772) * _tmp4;
  const Scalar _tmp112 = _tmp12 * _tmp71;
  const Scalar _tmp113 = -_tmp112 + _tmp79;
  const Scalar _tmp114 = _tmp113 * _tmp34;
  const Scalar _tmp115 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp116 = -_tmp115 * _tmp18 + _tmp85;
  const Scalar _tmp117 = 2 * _tmp116;
  const Scalar _tmp118 = _tmp117 * _tmp22;
  const Scalar _tmp119 = -_tmp89 * _tmp94;
  const Scalar _tmp120 = _tmp107 * _tmp52 + _tmp111 * _tmp39 - _tmp111 * _tmp41 +
                         _tmp28 * (_tmp119 - _tmp75 * _tmp93) +
                         _tmp38 * (_tmp101 + _tmp114 + _tmp118) - _tmp45 * (_tmp46 + _tmp67);
  const Scalar _tmp121 = Scalar(1.038176) * _tmp1 * _tmp16 * _tmp29;
  const Scalar _tmp122 = Scalar(0.259544) * _tmp54;
  const Scalar _tmp123 = _tmp122 * _tmp39;
  const Scalar _tmp124 = _tmp122 * _tmp41;
  const Scalar _tmp125 =
      _tmp121 + _tmp123 * _tmp51 + _tmp123 - _tmp124 * _tmp51 - _tmp124 +
      _tmp28 * (_tmp113 * _tmp31 + _tmp116 * _tmp34 + _tmp77 + _tmp91) +
      _tmp38 * (-_tmp113 * _tmp76 - _tmp117 * _tmp33 + _tmp31 * _tmp75 + _tmp34 * _tmp89);
  const Scalar _tmp126 = Scalar(0.129772) * _tmp68;
  const Scalar _tmp127 = _tmp126 * _tmp51 + _tmp28 * (-_tmp100 + _tmp114 - _tmp118 + _tmp99) +
                         _tmp38 * (-_tmp109 * _tmp113 + _tmp119) -
                         _tmp45 * (-_tmp103 + _tmp104 + _tmp106) - _tmp9;
  const Scalar _tmp128 = -_tmp87 - _tmp88;
  const Scalar _tmp129 = _tmp128 * _tmp76;
  const Scalar _tmp130 = -_tmp115 * _tmp21 + _tmp83;
  const Scalar _tmp131 = 2 * _tmp130;
  const Scalar _tmp132 = _tmp131 * _tmp22;
  const Scalar _tmp133 = _tmp112 + _tmp78;
  const Scalar _tmp134 = _tmp72 - _tmp74;
  const Scalar _tmp135 = _tmp133 * _tmp34 + _tmp134 * _tmp57;
  const Scalar _tmp136 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp137 = Scalar(0.129772) * _tmp44;
  const Scalar _tmp138 = -_tmp128 * _tmp94;
  const Scalar _tmp139 = -_tmp136 * _tmp137 + _tmp137 * _tmp50 +
                         _tmp28 * (-_tmp134 * _tmp93 + _tmp138) +
                         _tmp38 * (_tmp129 + _tmp132 + _tmp135) - _tmp45 * _tmp49;
  const Scalar _tmp140 = Scalar(0.129772) * _tmp61;
  const Scalar _tmp141 =
      -_tmp121 - _tmp136 * _tmp140 + _tmp140 * _tmp50 +
      _tmp28 * (_tmp128 * _tmp57 + _tmp130 * _tmp34 + _tmp133 * _tmp31 + _tmp134 * _tmp76) +
      _tmp38 * (_tmp128 * _tmp34 - _tmp131 * _tmp33 - _tmp133 * _tmp76 + _tmp134 * _tmp31);
  const Scalar _tmp142 = -_tmp126 * _tmp136 + _tmp126 * _tmp50 +
                         _tmp28 * (-_tmp129 - _tmp132 + _tmp135) +
                         _tmp38 * (-_tmp109 * _tmp133 + _tmp138) - _tmp45 * _tmp64;
  const Scalar _tmp143 = Scalar(0.14130699999999999) * _tmp24;
  const Scalar _tmp144 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp145 = _tmp143 * _tmp144 - _tmp143 * _tmp37 - _tmp28 * _tmp36;
  const Scalar _tmp146 = Scalar(0.14130699999999999) * _tmp58;
  const Scalar _tmp147 = _tmp144 * _tmp146 - _tmp146 * _tmp37 - _tmp28 * _tmp62;
  const Scalar _tmp148 = Scalar(0.14130699999999999) * _tmp66;
  const Scalar _tmp149 = _tmp144 * _tmp148 - _tmp148 * _tmp37 - _tmp28 * _tmp65;
  const Scalar _tmp150 = _tmp70 + lamb;
  const Scalar _tmp151 = _tmp108 * _tmp125 + _tmp110 * _tmp127 + _tmp120 * _tmp96;
  const Scalar _tmp152 = _tmp108 * _tmp141 + _tmp110 * _tmp142 + _tmp139 * _tmp96;
  const Scalar _tmp153 = _tmp108 * _tmp147 + _tmp110 * _tmp149 + _tmp145 * _tmp96;
  const Scalar _tmp154 = _tmp120 * _tmp139 + _tmp125 * _tmp141 + _tmp127 * _tmp142;
  const Scalar _tmp155 = _tmp120 * _tmp145 + _tmp125 * _tmp147 + _tmp127 * _tmp149;
  const Scalar _tmp156 = _tmp139 * _tmp145 + _tmp141 * _tmp147 + _tmp142 * _tmp149;

  // Output terms (4)
  if (f != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _f = (*f);

    _f(0, 0) = _tmp53;
    _f(1, 0) = _tmp63;
    _f(2, 0) = _tmp69;
  }

  if (e != nullptr) {
    Scalar& _e = (*e);

    _e = _tmp70;
  }

  if (J != nullptr) {
    Eigen::Matrix<Scalar, 3, 4>& _J = (*J);

    _J(0, 0) = _tmp96;
    _J(1, 0) = _tmp108;
    _J(2, 0) = _tmp110;
    _J(0, 1) = _tmp120;
    _J(1, 1) = _tmp125;
    _J(2, 1) = _tmp127;
    _J(0, 2) = _tmp139;
    _J(1, 2) = _tmp141;
    _J(2, 2) = _tmp142;
    _J(0, 3) = _tmp145;
    _J(1, 3) = _tmp147;
    _J(2, 3) = _tmp149;
  }

  if (A != nullptr) {
    Eigen::Matrix<Scalar, 4, 4>& _A = (*A);

    _A(0, 0) = std::pow(_tmp108, Scalar(2)) + std::pow(_tmp110, Scalar(2)) + _tmp150 +
               std::pow(_tmp96, Scalar(2));
    _A(1, 0) = _tmp151;
    _A(2, 0) = _tmp152;
    _A(3, 0) = _tmp153;
    _A(0, 1) = _tmp151;
    _A(1, 1) = std::pow(_tmp120, Scalar(2)) + std::pow(_tmp125, Scalar(2)) +
               std::pow(_tmp127, Scalar(2)) + _tmp150;
    _A(2, 1) = _tmp154;
    _A(3, 1) = _tmp155;
    _A(0, 2) = _tmp152;
    _A(1, 2) = _tmp154;
    _A(2, 2) = std::pow(_tmp139, Scalar(2)) + std::pow(_tmp141, Scalar(2)) +
               std::pow(_tmp142, Scalar(2)) + _tmp150;
    _A(3, 2) = _tmp156;
    _A(0, 3) = _tmp153;
    _A(1, 3) = _tmp155;
    _A(2, 3) = _tmp156;
    _A(3, 3) = std::pow(_tmp145, Scalar(2)) + std::pow(_tmp147, Scalar(2)) +
               std::pow(_tmp149, Scalar(2)) + _tmp150;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace symik
